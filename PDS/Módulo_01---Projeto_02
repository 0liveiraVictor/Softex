_______________________________________________APLICAÇÃO DE PADRÃO DE PROJETO (PROTOTYPE)_______________________________________________

Crie uma fábrica de veículos utilizando o padrão Prototype com base no exemplo apresentado no Hipertexto 2. Os requisitos do projeto 
devem ser:

- implemente uma classe abstrata Veículo com um construtor padrão e os métodos clone e represent;
- o construtor da classe Veículo deve receber modelo, marca, cor e numeroRodas como parâmetros;
- crie pelo menos duas subclasses da classe Veículo, que acrescentem um ou mais atributos, por exemplo: carro que tem dois campos a 
mais, como numeroRodas e numeroPortas;
- desenvolva uma classe Aplicação que deve criar um array com seis veículos com dois tipos de veículos diferentes (subclasses), 
utilizando o método clone dos objetos para preencher o array;
- na classe Aplicação, implemente um método que retorne um array com o mesmo tamanho do array de veículos, onde cada elemento deve ser 
um clone dos elementos do array veículos;
- no final, deve imprimir na tela o retorno da função represent de cada elemento desse novo array de clones de veículos.
________________________________________________________________________________________________________________________________________

SOLUÇÃO:

Foi implementado uma classe abstrata denominada 'Vehicle' ('Vehicle.java') em que foram definidos os métodos construtores (base e 
protótipo), represent e clone (método abstrato). O construtor do protótipo admitiu os atributos 'modelo', 'marca', 'cor' e 'numeroRodas' 
como parâmetros. Três sub-classes da classe 'Vehicle' foram construídas, sendo elas: 'Fiat' ('Fiat.java'), 'Chevrolet' ('Chevrolet.java') 
e 'Volkswagen' ('Volkswagen.java'); as sub-classes acrescentaram mais três novas propriedades: 'especie', 'categoria' e 'peso'. Uma 
classe de aplicação ('Application.java') foi desenvolvida com um programa principal e um método de clonagem de um array ('cloneArray').
Na aplicação foram instanciados seis veículos distintos (dois veículos de cada uma das três sub-classes) e cada uma dessas instâncias foi 
armazenada como elemento de um array do tipo 'Vehicle' (array de seis 'veículos'). O método 'cloneArray' (da própria aplicação) foi 
utilizado para clonar cada um dos elementos do array 'veículos' em um novo array, definido como 'veículos clonados'. Por fim, foi 
utilizado o método 'represent' (definido na classe abstrata) para imprimir na tela os elementos do array de clones de veículos.  

Dado o problema, as implementações para a criação da fábrica de veículos (PROTOTYPE) foram definidas conforme abaixo:

//pacote base
package client;

//import da classe abstrata 'Vehicle' e das classes concretas de veículos: 'Fiat', 'Chevrolet' e 'Volkswagen'
import prototype.Vehicle;
import concreteprototype.*;

//classe de aplicação ('Application')
public class Application {

    //programa principal
    public static void main(String[] args) {

        //definindo dois arrays (1º array -> 'veículos' | 2º array -> 'veículos clonados')
        Vehicle[] vehicleArray = new Vehicle[6];
        Vehicle[] vehicleArrayClone = new Vehicle[vehicleArray.length];

        //estabelecendo uma instância da sub-classe 'Fiat' APENAS para chamada do método 'represent' (definido na classe abstrata 'Vehicle')
        Vehicle print = new Fiat(); //ou Vehicle print = new Chevrolet(); ou Vehicle print = new Volkswagen();

        //instância do veículo 1 - (1º 'Fiat')
        Vehicle vehicleFiat1 = new Fiat();
        
            vehicleFiat1.modelo = "Palio Atractive";
            vehicleFiat1.marca = "Fiat";
            vehicleFiat1.cor = "Prata";
            vehicleFiat1.numeroRodas = 4;
            vehicleFiat1.especie = "Passeio";
            vehicleFiat1.categoria = "Transporte de Passageiros";
            vehicleFiat1.peso = 999.0;

        //instância do veículo 2 - (2º 'Fiat')
        Vehicle vehicleFiat2 = new Fiat();
        
            vehicleFiat2.modelo = "Argo Abarth";
            vehicleFiat2.marca = "Fiat";
            vehicleFiat2.cor = "Vermelho, Branco e Preto";
            vehicleFiat2.numeroRodas = 4;
            vehicleFiat2.especie = "Esportivo";
            vehicleFiat2.categoria = "Transporte de Passageiros";
            vehicleFiat2.peso = 1140.0;

        //instância do veículo 3 - (1º 'Chevrolet')
        Vehicle vehicleChevrolet1 = new Chevrolet();
        
            vehicleChevrolet1.modelo = "Cruze V8";
            vehicleChevrolet1.marca = "Chevrolet";
            vehicleChevrolet1.cor = "Amarelo e Preto";
            vehicleChevrolet1.numeroRodas = 4;
            vehicleChevrolet1.especie = "Corrida";
            vehicleChevrolet1.categoria = "Competição";
            vehicleChevrolet1.peso = 1300.0;

        //instância do veículo 4 - (2º 'Chevrolet')
        Vehicle vehicleChevrolet2 = new Chevrolet();
        
            vehicleChevrolet2.modelo = "Equinox Premier";
            vehicleChevrolet2.marca = "Chevrolet";
            vehicleChevrolet2.cor = "Cinza Drake";
            vehicleChevrolet2.numeroRodas = 4;
            vehicleChevrolet2.especie = "Passeio";
            vehicleChevrolet2.categoria = "Transporte de Passageiros";
            vehicleChevrolet2.peso = 1675.0;

        //instância do veículo 5 - (1º 'Volkswagen')
        Vehicle vehicleVolkswagen1 = new Volkswagen();
        
            vehicleVolkswagen1.modelo = "Constellation 26.420";
            vehicleVolkswagen1.marca = "Volkswagen";
            vehicleVolkswagen1.cor = "Vinho";
            vehicleVolkswagen1.numeroRodas = 10;
            vehicleVolkswagen1.especie = "Caminhão";
            vehicleVolkswagen1.categoria = "Transporte de Carga";
            vehicleVolkswagen1.peso = 63000.0;

        //instância do veículo 6 - (2º 'Volkswagen')
        Vehicle vehicleVolkswagen2 = new Volkswagen();
        
            vehicleVolkswagen2.modelo = "15.190 ODR (ORE 3)";
            vehicleVolkswagen2.marca = "Volkswagen";
            vehicleVolkswagen2.cor = "Amarelo e Preto";
            vehicleVolkswagen2.numeroRodas = 6;
            vehicleVolkswagen2.especie = "Ônibus";
            vehicleVolkswagen2.categoria = "Transporte Escolar";
            vehicleVolkswagen2.peso = 15000.0;

        //definindo os elementos do array 'vehicleArray'
        vehicleArray[0] = vehicleFiat1;
        vehicleArray[1] = vehicleFiat2;
        vehicleArray[3] = vehicleChevrolet1;
        vehicleArray[2] = vehicleChevrolet2;
        vehicleArray[4] = vehicleVolkswagen1;
        vehicleArray[5] = vehicleVolkswagen2;

        //usando o método de clonagem 'cloneArray' (criando o array 'veículos clonados' a partir do array 'veículos')
        vehicleArrayClone = cloneArray(vehicleArray);

        //impressão dos elementos do array 'vehicleArrayClone' ('veículos clonados')
        System.out.println("------------------------------------ARRAY DE VEÍCULOS CLONADOS------------------------------------\n");
        print.represent(vehicleArrayClone);
        System.out.println("--------------------------------------------------------------------------------------------------\n");
    
    }

    //método de clone do array de veículos em um novo array (array -> arrayClone)
    private static Vehicle[] cloneArray(Vehicle[] array){

        //clonagem dos elementos (objetos) do array de veículos usando o método 'clone'
        Vehicle[] arrayClone = array.clone();

        return arrayClone;

    }

}
****************************************************************************************************************************************

//pacote base
package prototype;

//classe abstrata 'Vehicle'
public abstract class Vehicle {

    //atributos da classe
    public String modelo; 
    public String marca;
    public String cor;
    public int numeroRodas;

    //atributos das sub-classes
    public String especie;
    public String categoria; 
    public double peso;

    //construtor normal
    public Vehicle(){}

    //construtor do protótipo
    public Vehicle(Vehicle vehicle){

        this.modelo = vehicle.modelo;
        this.marca = vehicle.marca;
        this.cor = vehicle.cor;
        this.numeroRodas = vehicle.numeroRodas;

    }

    //assinatura do método de cópia (abstract method)
    public abstract Vehicle clone();

    //método represent
    public void represent(Vehicle[] arrayPrint){

        for(int i = 0; i < arrayPrint.length; i++){

            System.out.println("<<< " + (i + 1) + "º VEÍCULO >>>");
            System.out.println("Marca: " + arrayPrint[i].marca);
            System.out.println("Modelo: " + arrayPrint[i].modelo);
            System.out.println("Categoria: " + arrayPrint[i].categoria);
            System.out.println("Espécie: " + arrayPrint[i].especie);
            System.out.println("Cor: " + arrayPrint[i].cor);
            System.out.println("Nº de Rodas: " + arrayPrint[i].numeroRodas);
            System.out.println("Peso: " + arrayPrint[i].peso + " Kg");
            System.out.println("\n");

        }

    }

}
****************************************************************************************************************************************

//pacote base
package concreteprototype;

//import da classe abstrata 'Vehicle'
import prototype.Vehicle;

//classe concreta 'Fiat' (subclasse de 'Vehicle') 
public class Fiat extends Vehicle {

    //atributos da classe
    public String especie;
    public String categoria;  
    public double peso;

    //construtor base
    public Fiat(){}

    //construtor do protótipo
    public Fiat(Fiat fiat){
        
        super(fiat);
        if(fiat != null){
        
            this.especie = fiat.especie;
            this.categoria = fiat.categoria;
            this.peso = fiat.peso;
        
        }

    }

    //método clone para objetos (veículos) da 'Fiat'
    @Override
    public Vehicle clone(){

        return new Fiat(this);

    }
    
}
****************************************************************************************************************************************

//pacote base
package concreteprototype;

//import da classe abstrata 'Vehicle'
import prototype.Vehicle;

//classe concreta 'Chevrolet' (subclasse de 'Vehicle') 
public class Chevrolet extends Vehicle {

    //atributos da classe
    public String especie;
    public String categoria;  
    public double peso;

    //construtor base
    public Chevrolet(){}

    //construtor do protótipo
    public Chevrolet(Chevrolet chevrolet){
        
        super(chevrolet);
        if(chevrolet != null){
        
            this.especie = chevrolet.especie;
            this.categoria = chevrolet.categoria;
            this.peso = chevrolet.peso;
        
        }

    }

    //método clone para objetos (veículos) da 'Chevrolet'
    @Override
    public Vehicle clone(){

        return new Chevrolet(this);

    }
    
}
****************************************************************************************************************************************

//pacote base
package concreteprototype;

//import da classe abstrata 'Vehicle'
import prototype.Vehicle;

//classe concreta 'Volkswagen' (subclasse de 'Vehicle') 
public class Volkswagen extends Vehicle {

    //atributos da classe
    public String especie;
    public String categoria; 
    public double peso;

    //construtor base
    public Volkswagen(){}

    //construtor do protótipo
    public Volkswagen(Volkswagen volkswagen){
        
        super(volkswagen);
        if(volkswagen != null){
        
            this.especie = volkswagen.especie;
            this.categoria = volkswagen.categoria;
            this.peso = volkswagen.peso;
        
        }

    }

    //método clone para objetos (veículos) da 'Volkswagen'
    @Override
    public Vehicle clone(){

        return new Volkswagen(this);

    }
    
}
****************************************************************************************************************************************

As imagens 'imagem1' e 'imagem2' (vide links abaixo) ilustram a saída do código 'Application' após a clonagem do array de 'veículos' em 
um outro array ('veículos clonados'):

	imagem1 ---> (https://github.com/0liveiraVictor/Softex/blob/main/PDS/DOC---M%C3%B3dulo_01---Projeto_02/imagem1.png)

	imagem2 ---> (https://github.com/0liveiraVictor/Softex/blob/main/PDS/DOC---M%C3%B3dulo_01---Projeto_02/imagem2.png)



######################################################################################################################################
######################################################################################################################################
################## -------------------------------------------------------------------------------------------------------------------
################## Full code Application.java (Link):
################## https://github.com/0liveiraVictor/Softex/blob/main/PDS/DOC---M%C3%B3dulo_01---Projeto_02/src/client/Application.java
################## -------------------------------------------------------------------------------------------------------------------
################## Full code Vehicle.java (Link):
################## https://github.com/0liveiraVictor/Softex/blob/main/PDS/DOC---M%C3%B3dulo_01---Projeto_02/src/prototype/Vehicle.java
################## -------------------------------------------------------------------------------------------------------------------
################## Full code Fiat.java (Link):
################## https://github.com/0liveiraVictor/Softex/blob/main/PDS/DOC---M%C3%B3dulo_01---Projeto_02/src/concreteprototype/Fiat.java
################## -------------------------------------------------------------------------------------------------------------------
################## Full code Chevrolet.java (Link):
################## https://github.com/0liveiraVictor/Softex/blob/main/PDS/DOC---M%C3%B3dulo_01---Projeto_02/src/concreteprototype/Chevrolet.java
################## -------------------------------------------------------------------------------------------------------------------
################## Full code Volkswagen.java (Link):
################## https://github.com/0liveiraVictor/Softex/blob/main/PDS/DOC---M%C3%B3dulo_01---Projeto_02/src/concreteprototype/Volkswagen.java
################## -------------------------------------------------------------------------------------------------------------------
######################################################################################################################################
######################################################################################################################################
________________________________________________________________________________________________________________________________________
