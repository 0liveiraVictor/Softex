_________________________________SERVIDOR WEB E SUAS RESPOSTAS PARA REQUISIÇÕES COM DIFERENTES STATUS HTTP______________________________

Faça um servidor web para responder requisições com diferentes status HTTP, os quais devem estar de acordo com os parâmetros enviados 
pelo placeholder nas requisições. Exemplo: a rota “/listar/50” vai retornar o HTTP 404; a rota /listar/10 vai retornar o HTTP 200 com 
alguma string.
________________________________________________________________________________________________________________________________________

SOLUÇÃO:

Foi desenvolvido um código ('server.js') para responder requisições com diferentes status HTTP. No algoritmo (em nodejs) foi utilizado 
as bibliotecas 'express', 'cors' e 'body-parser', e status de criação (201), sucesso (200) e erro (404) para encontrar os recursos. Os 
métodos HTTP do tipo 'get', 'post', 'put' e 'delete' foram implementados. Além disso, o método 'all' foi atribuído com um 'endpoint'. As 
respostas das requisições foram dadas com diferentes strings, sendo apresentadas de modo particular a cada requisição. O tratamento 
abordado para esse problema fez referência a criação de um banco de dados de filmes (catálogo de filmes), como se fosse uma cinemateca. 
O código abaixo descreve o servidor criado:

const express = require('express'); //importação da biblioteca 'express'
const cors = require('cors'); //importação da biblioteca 'cors'
const bodyParser = require('body-parser'); //importação da biblioteca 'body-parser'

const server = express(); //variável principal do servidor
server.use(bodyParser.json()); //configurando o servidor para que o body ('body-parser') das requisições seja interpretado como JSON
server.use(cors()); //configurando o servidor para uso do 'cors'

//definição da porta de acesso do servidor
const portAcess = 8080;

//definindo um banco de dados como sendo um array 'lista'
const lista = [];

// ------------------------------ Requisição HTTP POST ------------------------------
// Criando Entidades | Editando Entidades | Enviando Dados

// *********** adição de dados **********
server.post('/movie/add', (request, response)=>{

    let position = lista.length + 1; //valor da posição (índice + 1) atual da lista
    let movie = request.body; //recebendo os dados do filme a partir do corpo da requisição
    lista.push(movie); //adicionando o filme no banco de dados (lista)
    movie.posicao = position; //atribuição da posição do filme na lista

    //resposta da solicitação requisitada pelo cliente
    return response.status(201).json({

        Status: 'Filme adicionado na cinemateca com sucesso!',
        Catalogo_add: movie

    });

});

// ------------------------------ Requisição HTTP GET ------------------------------
// Solicitando Dados | Lendo Dados

// *********** visualização de todos os dados ********** 
server.get('/movie/show', (request, response)=>{

    if(lista.length == 0){

        //resposta da solicitação requisitada pelo cliente
        return response.status(404).send('<h2>Cinemateca vazia!</h2>');

    } else{

        //resposta da solicitação requisitada pelo cliente
        return response.status(200).json({
            
            Status: 'Cinemateca encontrada!',
            Catalogo_all: lista
        
        });

    }

});

// *********** visualização de dados por identificadores ('position') ********** 
server.get('/movie/:position', (request, response)=>{

    let id = request.params.position; //identificador 'id'

    if(id > 0 && id <= lista.length){

        //resposta da solicitação requisitada pelo cliente caso a posição seja encontrada
        return response.status(200).json({

            Status: `${id}º filme encontrado na cinemateca!`,
            Catalogo_id: lista[id-1]

        });

    } else if(id <= 0 || id > lista.length){

        //resposta da solicitação requisitada pelo cliente caso a posição NÃO seja encontrada
        return response.status(404).send('<h2>Filme não encontrado!</h2>');

    }

});

// ------------------------------ Requisição HTTP PUT ------------------------------
// Atualizando Dados | Substituindo Recursos

// *********** atualização de dados por identificadores ('position') **********
server.put('/movie/edit/:position', (request, response)=>{

    let id = request.params.position; //identificador 'id'   

    if(id > 0 && id <= lista.length){

        let movie = request.body; //recebendo os dados do filme a partir do corpo da requisição
        lista[id-1] = movie; //atualizando o filme no banco de dados (lista)
        movie.posicao = parseInt(id); //atribuição da posição do filme na lista

        //resposta da solicitação requisitada pelo cliente caso a posição seja encontrada
        return response.status(200).json({

            Status: `${id}º filme atualizado na cinemateca com sucesso!`,
            newCatalogo_id: lista[id-1]

        });

    } else if(id <= 0 || id > lista.length){

        //resposta da solicitação requisitada pelo cliente caso a posição NÃO seja encontrada
        return response.status(404).send('<h2>Filme não encontrado!</h2>' + '<h2>Atualização não realizada!</h2>');

    }

});

// ------------------------------ Requisição HTTP DELETE ------------------------------
// Excluindo Entidades

// *********** deleção de dados **********
server.delete('/movie/del/:position', (request, response)=>{

    let id = request.params.position; //identificador 'id'   

    if(id > 0 && id <= lista.length){

        lista.splice(id-1, 1); //removendo os dados do filme a partir da requisição solicitada pelo cliente

        //resposta da solicitação requisitada pelo cliente caso a posição seja encontrada
        return response.status(200).json({

            Status: `Filme deletado da cinemateca com sucesso!`,
            Catalogo_all: lista

        });

    } else if(id <= 0 || id > lista.length){

        //resposta da solicitação requisitada pelo cliente caso a posição NÃO seja encontrada
        return response.status(404).send('<h2>Filme não encontrado!</h2>' + '<h2>Deleção não realizada!</h2>');

    }

});

// ------------------------------ Requisição HTTP ALL ------------------------------
// Tratamento de Erros

// *********** endpoint **********
server.all('*', (request, response)=>{

    //resposta ao cliente caso haja erro de sintaxe na solicitação da requisição
    return response.status(404).send('<h2>Página não encontrada!</h2>');

});

//conexão de acesso ao servidor
server.listen(portAcess, ()=>{

    //impressão no console da "ligação" do servidor
    console.log('-------------------------------------------------------------------------------------'); 
    console.log(`A inicialização do servidor foi executada na porta ${portAcess}.`);
    console.log(`URL: http://localhost:${portAcess}`);
    console.log('-------------------------------------------------------------------------------------');

});
----------------------------------------------------------------------------------------------------------------------------------------

As imagens imagem1, imagem2, imagem3, imagem4, imagem5 e imagem6 (vide links) exibem as respostas das requisições 'get', 'post', 'put', 
'delete' e 'all' no software Insomnia, não necessariamente nessa ordem:

	imagem1 ---> (https://github.com/0liveiraVictor/Softex/blob/main/Node_JS/DOC---M%C3%B3dulo_03---Projeto_02/imagem1.png)
				  [adição do primeiro filme no banco de dados - HTTP 'post']

	imagem2 ---> (https://github.com/0liveiraVictor/Softex/blob/main/Node_JS/DOC---M%C3%B3dulo_03---Projeto_02/imagem2.png)
				  [exibição dos dados de todos os filmes registrados no banco de dados - HTTP 'get']

	imagem3 ---> (https://github.com/0liveiraVictor/Softex/blob/main/Node_JS/DOC---M%C3%B3dulo_03---Projeto_02/imagem3.png)
				  [exibição dos dados do filme registrado na posição 4 no banco de dados - HTTP 'get']

	imagem4 ---> (https://github.com/0liveiraVictor/Softex/blob/main/Node_JS/DOC---M%C3%B3dulo_03---Projeto_02/imagem4.png)
				  [tentativa de atualização dos dados do filme registrado na posição 4 | erro no caminho da URL (Página não encontrada!) - HTTP 'put']

	imagem5 ---> (https://github.com/0liveiraVictor/Softex/blob/main/Node_JS/DOC---M%C3%B3dulo_03---Projeto_02/imagem5.png)
				  [atualização dos dados do filme registrado na posição 4 - HTTP 'put']

	imagem6 ---> (https://github.com/0liveiraVictor/Softex/blob/main/Node_JS/DOC---M%C3%B3dulo_03---Projeto_02/imagem6.png)
				  [deleção dos dados do filme registrado na posição 5 | HTTP 'delete']



######################################################################################################################################
######################################################################################################################################
################## -------------------------------------------------------------------------------------------------------------------
################## Full code server.js (Link):
################## https://github.com/0liveiraVictor/Softex/blob/main/Node_JS/DOC---M%C3%B3dulo_03---Projeto_02/server.js
################## -------------------------------------------------------------------------------------------------------------------
######################################################################################################################################
######################################################################################################################################
________________________________________________________________________________________________________________________________________
